c
matched == :matches_platform_c
matched
c
transform_hours hours
hours.present?
MatchHourFormat.new(hours).call
MatchHourFormat.new(hours)
transform_hours hours
q!
s
c
s
matcher
s
validate_information platform_hash
c
s
venue_platform
c
s
q!
params
q!
Fetchers::FetchPlatforms.new.call
fetcher
c
fetcher
s
c
fetcher
c
v
fetcher
q!
@response[:code]
q!
@response[:code]
q!
response
response_hash
s
@response
c
@response
asd.present?@response
q!
asd.present?
asd=@params['namesd']
asd.present?
asd=@params['name']
asd.present?
asd=@params['namesd'].present?
@params['namesd'].present?
@params['namesd'].present? 'true' : 'false'
if true
if @params['namesd'].present? 'true' : 'false'
if @params['namesd'].present? 'true' : ' false'
@params['namesd'].present? 'true' : ' false'
@params['namesd'].present?
@params['names'].present?
@params['names']='asd'
@params['name']
@params.name
@params.permit(:name)
@params
@Ã¾arams
c
s
response.body.to_json
response.body.to_json.to_h
response.body.to_h
response.body.to_json
response.body.as_json
response.body
response.code
response.body
response.class
response.data
response
q!
response
c
params_hash
q!
{venue: @params.as_json}.as_json
{venue: @params.as_json}.to_json
{venue: @params.as_json}
{
@params.as_json
@params.to_h
@params.hash
JSON.parse(@params)
@params.to_json
@params
c
s
params_hash.to_json
params_hash
q!
@params.to_json
params_hash
q!
platform_hash['hours'] =~ /((\d{2}:\d{2})-(\d{2}:\d{2})\|){7}/
platform_hash['hours'] =~ /((\d{2}:\d{2})-(\d{2}:\d{2})\|){6}/
platform_hash['hours'] =~ /((\d{2}:\d{2})-(\d{2}:\d{2})\|){1,10}/
platform_hash['hours'] =~ /((\d{2}:\d{2})-(\d{2}:\d{2})\|){2}/
platform_hash['hours'] =~ /((\d{2}:\d{2})-(\d{2}:\d{2})\|)/
 platform_hash['hours']
platform_hash['hours'] =~ /((\d{2}:\d{2})-(\d{2}:\d{2})\|){7}/
hours_right_format
q!
@params['name']
@params["name"]
@params
q!
@params
q!
@params
params
exit
@params
q!
platform_hash['address']
platform_hash[:address]
platform_hash{
q!
platform_hash
exit
e
@platform
response
@url
